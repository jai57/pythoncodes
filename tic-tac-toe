import numpy as np 
board = np.array([["-","-","-"],["-","-","-"],["-","-","-"]])
p1s="X"
p2s="L"

def check_rows(symbol):
    for i in range(3):
        count=0
        for j in range(3):
            if board[i][j]==symbol:
                count+=1
        if count==3:
            
            return True 
    return False
    
def check_cols(symbol):
    for i in range(3):
        count=0
        for j in range(3):
            if board[j][i]==symbol:
                count+=1
        if count==3:
            
            return True 
    return False
    
def check_diagonals(symbol):
    if board[0][0]==board[1][1] and board[1][1]==board[2][2] and board[2][2]==symbol :
        return True
    elif board[0][2]==board[1][1] and board[1][1]==board[2][0] and board[2][0]==symbol :
        return True 
    return False
    
def place(symbol):
    print(np.matrix(board))
    row=int(input("tell me ur row"))
    col=int(input("tell me ur column"))
    while(1):
        if row>-1 and row<3 and col>-1 and col<3 and board[row][col]=="-":
            board[row][col]=symbol
            break
        else:
            print("u entered invalid input so try again")
            row=int(input("tell me ur row"))
            col=int(input("tell me ur column"))
            
    board[row][col]=symbol

def won(symbol):
    return check_rows(symbol) or check_cols(symbol) or check_diagonals(symbol)
    
def play():
    turn = 0
    for turn in range(9):
        if turn%2==0:
            print("player 1,its ur turn")
            place(p1s)
            if won(p1s):
                print(np.matrix(board))
                print(p1s," player1 , wow! u won bro")
                break 
        else:
            print("player 2,its ur turn")
            place(p2s)
            if won(p2s):
                print(np.matrix(board))
                print("player2 , wow! u won bro")
                break
        turn+=1 
    if not(won(p1s)) and not(won(p2s)):
        print("draw")
play()
        
    
        
